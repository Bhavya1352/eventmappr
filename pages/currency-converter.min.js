import e,{useState as t,useEffect as o}from"react";import{LineChart as r,Line as l,XAxis as a,YAxis as n,Tooltip as s,ResponsiveContainer as i,CartesianGrid as d}from"recharts";import{TrendingUp as c,ArrowRightLeft as u,DollarSign as m,ChevronDown as f}from"lucide-react";let CURRENCIES={USD:{name:"US Dollar",symbol:"$"},EUR:{name:"Euro",symbol:"€"},GBP:{name:"British Pound",symbol:"\xa3"},JPY:{name:"Japanese Yen",symbol:"\xa5"},AUD:{name:"Australian Dollar",symbol:"A$"},CAD:{name:"Canadian Dollar",symbol:"C$"},CHF:{name:"Swiss Franc",symbol:"Fr"},CNY:{name:"Chinese Yuan",symbol:"\xa5"},INR:{name:"Indian Rupee",symbol:"₹"},BRL:{name:"Brazilian Real",symbol:"R$"}},USD_RATES={USD:1,EUR:.92,GBP:.79,JPY:155.5,AUD:1.51,CAD:1.37,CHF:.87,CNY:7.23,INR:83.3,BRL:5.27};function buildRates(){let e={};for(let t in USD_RATES)for(let o in e[t]={},USD_RATES)e[t][o]=+(USD_RATES[o]/USD_RATES[t]).toFixed(4);return e}let RATES=buildRates();export default function y(){let[e,r]=t(""),[l,a]=t("USD"),[n,s]=t("EUR"),[i,d]=t(""),[c,u]=t(!1),[m,f]=t([]),[y,$]=t([]),[b,x]=t(!1),[g,_]=t(!1),[R,S]=t([]);function h(){let t=parseFloat(e);if(isNaN(t)||t<0){d(""),u(!1);return}let o=RATES[l][n],r=(t*o).toFixed(2);d(r),u(!0)}o(()=>{c&&h()},[l,n]),o(()=>{let e=localStorage.getItem("rateAlerts");e&&S(JSON.parse(e))},[]),o(()=>{localStorage.setItem("rateAlerts",JSON.stringify(R))},[R]),o(()=>{let e=RATES[l][n],t=Array.from({length:7},(t,o)=>({day:`Day ${o+1}`,value:+(e*(1+(Math.random()-.5)*.05)).toFixed(4)}));f(t)},[l,n]),o(()=>{let e=["EUR","INR","JPY","GBP","AUD"].map(e=>({code:e,value:RATES.USD[e].toFixed(2),symbol:CURRENCIES[e].symbol}));$(e)},[]),o(()=>{let e=setInterval(()=>{R.forEach((e,t)=>{let o=RATES[e.base][e.target];(">"===e.condition&&o>e.value||"<"===e.condition&&o<e.value)&&(alert(`Alert: ${e.base} → ${e.target} is now ${o} (${e.condition} ${e.value})`),S(e=>e.filter((e,o)=>o!==t)))})},3e4);return()=>clearInterval(e)},[R]);let C=()=>{a(n),s(l)},A=(e,t,o,r)=>{S(l=>[...l,{base:e,target:t,condition:o,value:r}])};return<>

      <div style={styles.container}>

        <div style={styles.wrapper}>

          <div style={styles.header}>

            <div style={styles.titleRow}>

              <m style={styles.headerIcon}/>

              <h1 style={styles.title}>Currency Exchange</h1>

            </div>

            <p style={styles.subtitle}>

              Real-time currency conversion for global travelers

            </p>

          </div>



          <div style={styles.mainGrid}>

            <div style={styles.leftColumn}>

              <div style={styles.card}>

                <h2 style={styles.cardTitle}>

                  <u style={styles.cardIcon}/>

                  Convert Currency

                </h2>



                <div style={styles.formSection}>

                  <div style={styles.inputGroup}>

                    <label style={styles.label}>Amount</label>

                    <input type="number"placeholder="0.00"value={e}onChange={e=>r(e.target.value)}style={styles.input}/>

                  </div>



                  <div style={styles.selectRow}>

                    <CustomDropdown value={l}onChange={a}isOpen={b}setIsOpen={x}label="From"/>

                    <CustomDropdown value={n}onChange={s}isOpen={g}setIsOpen={_}label="To"/>

                  </div>



                  <div style={styles.buttonRow}>

                    <button onClick={C}style={styles.swapButton}>

                      <u style={styles.buttonIcon}/>

                      Swap

                    </button>

                    <button onClick={h}style={styles.convertButton}>

                      Convert

                    </button>

                  </div>



                  {c&&<div style={styles.resultCard}>

                      <div style={styles.resultContent}>

                        <p style={styles.resultLabel}>

                          {e} {l} equals

                        </p>

                        <p style={styles.resultAmount}>

                          {i} {CURRENCIES[n].symbol}

                        </p>

                        <p style={styles.resultRate}>

                          Rate: 1 {l} = {RATES[l][n]} {n}

                        </p>

                      </div>

                    </div>}

                </div>

              </div>



              <div style={styles.card}>

                <h3 style={styles.sectionTitle}>Popular USD Rates</h3>

                <div style={styles.popularGrid}>

                  {y.map(e=><div key={e.code}style={styles.popularCard}>

                      <e style={styles.popularCode}>{e.code}</e>

                      <e style={styles.popularValue}>

                        {e.value} {e.symbol}

                      </e>

                    </div>)}

                </div>

              </div>

            </div>



            <div style={styles.rightColumn}>

              <div style={styles.card}>

                <h2 style={styles.cardTitle}>

                  <c style={styles.cardIcon}/>

                  {l} → {n} Trend

                </h2>

                <div style={styles.chartContainer}>

                  <i width="100%"height="100%">

                    <r data={m}>

                      <d strokeDasharray="3 3"stroke="#e2e8f0"/>

                      <a dataKey="day"stroke="#64748b"/>

                      <n stroke="#64748b"domain={["dataMin - 0.01","dataMax + 0.01"]}/>

                      <s contentStyle={{backgroundColor:"white",border:"1px solid #e2e8f0",borderRadius:"12px",color:"#334155",boxShadow:"0 10px 15px -3px rgba(0, 0, 0, 0.1)"}}/>

                      <l type="monotone"dataKey="value"stroke="#3b82f6"strokeWidth={2}dot={{fill:"#3b82f6",strokeWidth:2,r:3}}activeDot={{r:5,stroke:"#3b82f6",strokeWidth:2}}/>

                    </r>

                  </i>

                </div>

              </div>

            </div>

          </div>

        </div>



        <div style={{...styles.card,marginTop:"2rem"}}>

          <h2 style={styles.cardTitle}>Set a Rate Alert</h2>

          <div style={{display:"flex",gap:"1rem",flexWrap:"wrap"}}>

            <select value={l}onChange={e=>a(e.target.value)}>

              {Object.keys(CURRENCIES).map(e=><option key={`a-base-${e}`}value={e}>

                  {e}

                </option>)}

            </select>

            <select value={n}onChange={e=>s(e.target.value)}>

              {Object.keys(CURRENCIES).map(e=><option key={`a-target-${e}`}value={e}>

                  {e}

                </option>)}

            </select>

            <select id="cond">

              <option value=">">Above</option>

              <option value="<">Below</option>

            </select>

            <input id="val"type="number"placeholder="Rate"style={{width:"100px"}}/>

            <button onClick={()=>{let e=document.getElementById("cond").value,t=parseFloat(document.getElementById("val").value);isNaN(t)||A(l,n,e,t)}}>

              Add Alert

            </button>

          </div>



          {R.length>0&&<div style={{marginTop:"1rem"}}>

              <h4 >Active Alerts</h4>

              <ul >

                {R.map((e,t)=><li key={`alert-${t}`}>

                    {e.base} → {e.target} {e.condition} {e.value.toFixed(4)}{" "}

                    <button onClick={()=>S(e=>e.filter((e,o)=>o!==t))}>

                      Remove

                    </button>

                  </li>)}

              </ul>

            </div>}

        </div>

      </div>



      <style jsx>{`
        * {
          box-sizing: border-box;
          margin: 0;
          padding: 0;
        }

        button:hover {
          background-color: #e2e8f0;
        }

        .dropdownButton:hover {
          border-color: #3b82f6;
          background-color: white;
          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        /* You can add more CSS here for hover/focus states */
      `}</style>

    </>};let styles={container:{minHeight:"100vh",background:"linear-gradient(135deg, #f8fafc 0%, #f1f5f9 50%, #f8fafc 100%)",padding:"32px 16px",fontFamily:'"Inter", -apple-system, BlinkMacSystemFont, sans-serif'},wrapper:{maxWidth:"1400px",margin:"0 auto"},header:{textAlign:"center",marginBottom:"48px"},titleRow:{display:"flex",alignItems:"center",justifyContent:"center",gap:"12px",marginBottom:"16px"},headerIcon:{width:"32px",height:"32px",color:"#059669"},title:{fontSize:"3rem",fontWeight:"700",background:"linear-gradient(90deg, #059669, #0ea5e9, #8b5cf6)",WebkitBackgroundClip:"text",WebkitTextFillColor:"transparent",backgroundClip:"text"},subtitle:{color:"#64748b",fontSize:"1.125rem"},mainGrid:{display:"grid",gridTemplateColumns:"1fr 1fr",gap:"32px"},leftColumn:{display:"flex",flexDirection:"column",gap:"24px"},rightColumn:{display:"flex",flexDirection:"column"},card:{background:"white",borderRadius:"16px",padding:"32px",border:"1px solid #e2e8f0",boxShadow:"0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)"},cardTitle:{display:"flex",alignItems:"center",gap:"8px",fontSize:"1.5rem",fontWeight:"600",color:"#1e293b",marginBottom:"24px"},cardIcon:{width:"24px",height:"24px",color:"#3b82f6"},formSection:{display:"flex",flexDirection:"column",gap:"24px"},inputGroup:{display:"flex",flexDirection:"column"},label:{display:"block",fontSize:"0.875rem",fontWeight:"500",color:"#374151",marginBottom:"8px"},input:{width:"100%",padding:"16px",background:"#f8fafc",border:"1px solid #e2e8f0",borderRadius:"12px",color:"#1e293b",fontSize:"1.125rem",outline:"none"},selectRow:{display:"grid",gridTemplateColumns:"1fr 1fr",gap:"16px"},selectGroup:{display:"flex",flexDirection:"column",position:"relative"},dropdownContainer:{position:"relative"},dropdownButton:{width:"100%",padding:"16px",background:"#f8fafc",border:"1px solid #e2e8f0",borderRadius:"12px",color:"#1e293b",fontSize:"1rem",outline:"none",cursor:"pointer"}};